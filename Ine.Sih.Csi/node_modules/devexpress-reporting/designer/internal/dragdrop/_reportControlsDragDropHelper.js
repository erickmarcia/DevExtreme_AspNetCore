/**
* DevExpress HTML/JS Reporting (designer\internal\dragdrop\_reportControlsDragDropHelper.js)
* Version:  20.2.5
* Build date: Jan 18, 2021
* Copyright (c) 2012 - 2021 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var xrBand_1 = require("../../bands/xrBand");
var utils_1 = require("../../utils/utils");
var xrReport_1 = require("../../controls/xrReport");
var xrTableRow_1 = require("../../controls/xrTableRow");
var xrTableCell_1 = require("../../controls/xrTableCell");
var xrTable_1 = require("../../controls/xrTable");
var analytics_elements_1 = require("@devexpress/analytics-core/analytics-elements");
var analytics_internal_1 = require("@devexpress/analytics-core/analytics-internal");
var analytics_widgets_internal_1 = require("@devexpress/analytics-core/analytics-widgets-internal");
var analytics_utils_1 = require("@devexpress/analytics-core/analytics-utils");
var $ = require("jquery");
var ReportControlsDragDropHelper = (function () {
    function ReportControlsDragDropHelper(draggable, _undoEngine, _dragHelperContent) {
        this._undoEngine = _undoEngine;
        this._dragHelperContent = _dragHelperContent;
        this._isTargetContainer = false;
        this._orderingAreaHeight = 8;
        this._tableControlTypes = ['XRTable', 'XRTableCell', 'XRTableRow'];
        this._draggable = draggable;
        this._draggableModel = this._getElementViewModel(draggable);
        this._draggableParent = this._draggableModel.parentModel();
        this._serializer = new analytics_utils_1.ModelSerializer();
    }
    ReportControlsDragDropHelper.prototype._getElementViewModel = function (item) {
        return item && item.data && item.data['data'];
    };
    ReportControlsDragDropHelper.prototype._canReorder = function (currentTarget, draggableData) {
        var currentModel = this._getElementViewModel(currentTarget);
        if (xrBand_1.BandViewModel.isReorderingBand(this._draggableModel) && xrBand_1.BandViewModel.isReorderingBand(currentModel))
            return utils_1._isReorderBand(this._draggableModel.surface, currentModel);
        return currentTarget.data.specifics === draggableData.specifics ||
            (this._draggableModel.getMetaData().canDrop(currentModel.surface, this._draggableModel) &&
                !currentModel.getMetaData().isContainer && !(currentModel instanceof xrReport_1.ReportViewModel));
    };
    ReportControlsDragDropHelper.prototype._canInsertToTarget = function (targetModel) {
        var targetIsContainer = targetModel.getMetaData().isContainer || targetModel instanceof xrReport_1.ReportViewModel;
        return targetIsContainer && targetModel.surface && targetModel.surface.canDrop()
            && this._draggableModel.getMetaData().canDrop(targetModel.surface, this._draggableModel);
    };
    ReportControlsDragDropHelper.prototype._isDragToBottom = function (currentTarget) {
        var _this = this;
        return analytics_internal_1.find(this._draggable.parent.items(), function (item) { return item === _this._draggable || item === currentTarget; }) === this._draggable;
    };
    ReportControlsDragDropHelper.prototype._targetIsClosestOfDraggable = function (target, draggable) {
        return target === draggable || (target.parent && this._targetIsClosestOfDraggable(target.parent, draggable));
    };
    ReportControlsDragDropHelper.prototype._canDrop = function (target, targetModel) {
        var isReportExplorerTreeListItem = target instanceof analytics_widgets_internal_1.TreeListItemViewModel && target.data && target.data['data'] instanceof analytics_elements_1.ElementViewModel;
        if (!isReportExplorerTreeListItem) {
            return false;
        }
        if (this._tableControlTypes.indexOf(this._draggableModel.controlType) === -1 && (targetModel.controlType === 'XRTable' || targetModel.controlType === 'XRTableRow'))
            return false;
        return ((this._draggableParent !== targetModel && !this._targetIsClosestOfDraggable(target, this._draggable)) &&
            (this._canReorder(target, this._draggable.data) || this._canInsertToTarget(targetModel)));
    };
    ReportControlsDragDropHelper.prototype.clearCssRules = function () {
        this._removeClass(this._targetElement);
    };
    ReportControlsDragDropHelper.prototype._removeClass = function (target) {
        $(target).removeClass('dxrd-treelist-droppable dxrd-drop-approve drop-before drop-after');
    };
    ReportControlsDragDropHelper.prototype._insertTableChildren = function (parent, selectedEl, position, weightsCells) {
        if (weightsCells === void 0) { weightsCells = null; }
        var newChild, selectedRowHeight = 0;
        if (selectedEl['@ControlType'] === 'XRTableRow') {
            newChild = new xrTableRow_1.XRTableRowViewModel(selectedEl, parent);
            selectedRowHeight = newChild.height.peek();
        }
        else if (selectedEl['@ControlType'] === 'XRTableCell') {
            newChild = new xrTableCell_1.XRTableCellViewModel(selectedEl, parent);
        }
        parent.addChild(newChild, position);
        if (weightsCells) {
            weightsCells.splice(position, 0, parseFloat(selectedEl['@Weight']));
            weightsCells.forEach(function (weight, index) {
                parent.cells()[index].weight(weight);
            });
        }
        if (selectedRowHeight) {
            parent.size.height(parent.size.height() + selectedRowHeight);
        }
        return newChild.surface;
    };
    ReportControlsDragDropHelper.prototype._getDroppableClassName = function (isInTopOrderArea, isInBottomOrderArea) {
        var droppableClassName = 'dxrd-treelist-droppable';
        var classDropBefore = 'drop-before';
        var classDropAfter = 'drop-after';
        var classDropApprove = 'dxrd-drop-approve';
        var targetModel = this._getElementViewModel(this._target);
        if (this._canDrop(this._target, targetModel) && (!this._dragHelperContent || !this._dragHelperContent.isLocked())) {
            droppableClassName = droppableClassName + ' ' + classDropApprove;
            var canOrder = this._canReorder(this._target, this._draggable.data);
            var isDragToBottom = canOrder && this._isDragToBottom(this._target);
            if (canOrder && this._draggableModel.controlType !== 'DetailReportBand') {
                droppableClassName = droppableClassName + ' ' + (isDragToBottom ? classDropAfter : classDropBefore);
                this._isTargetContainer = false;
            }
            else if (canOrder && isDragToBottom && isInBottomOrderArea) {
                droppableClassName = [droppableClassName, classDropAfter].join(' ');
                this._isTargetContainer = false;
            }
            else if (canOrder && !isDragToBottom && isInTopOrderArea) {
                droppableClassName = droppableClassName + ' ' + classDropBefore;
                this._isTargetContainer = false;
            }
        }
        return droppableClassName;
    };
    ReportControlsDragDropHelper.prototype._reorderBands = function (targetModel) {
        if (this._isTargetContainer) {
            targetModel.addChild(this._draggableModel);
        }
        else {
            this._undoEngine && this._undoEngine.start();
            this._draggableModel['level'](targetModel['level']());
            this._undoEngine && this._undoEngine.end();
        }
    };
    ReportControlsDragDropHelper.prototype._reorderTableControls = function (targetModel, siblings, isDragToBottom) {
        var _this = this;
        var clonedSiblings = siblings && siblings().slice(0);
        var draggableInfoClone = this._serializer.serialize(this._draggableModel);
        var weightsCells;
        if (this._draggableModel.controlType === 'XRTableCell') {
            weightsCells = clonedSiblings.filter(function (cell) {
                return cell.name.peek() !== _this._draggableModel.name.peek();
            }).map(function (cell) { return cell.weight.peek(); });
        }
        return this._insertTableChildren(targetModel.parentModel(), draggableInfoClone, siblings.indexOf(targetModel) + isDragToBottom, weightsCells);
    };
    ReportControlsDragDropHelper.prototype._changeControlParent = function (targetModel) {
        var targetRect = targetModel.surface.rect();
        var draggableRect = this._draggableModel.surface.rect();
        var rect = {};
        if (targetRect.width < draggableRect.left + draggableRect.width) {
            rect['left'] = targetRect.width - draggableRect.width;
            rect['left'] = rect['left'] > 0 ? rect['left'] : 0;
        }
        if (targetRect.height < draggableRect.top + draggableRect.height) {
            rect['top'] = targetRect.height - draggableRect.height;
            rect['top'] = rect['top'] > 0 ? rect['top'] : 0;
        }
        this._draggableModel.surface.rect(rect);
        targetModel.addChild(this._draggableModel);
    };
    ReportControlsDragDropHelper.prototype.setNewDropTarget = function (elementModel, element, mouseLocationY) {
        this._removeClass(this._targetElement);
        var $targetElement;
        this._target = elementModel;
        var isInBottomOrderArea;
        var isInTopOrderArea;
        $targetElement = $(element).closest('.dx-treelist-item');
        this._targetElement = $targetElement.get(0);
        if ($targetElement && $targetElement.length) {
            if (mouseLocationY && this._draggableModel.controlType === 'DetailReportBand') {
                var targetTop = $targetElement.offset().top;
                isInTopOrderArea = mouseLocationY < (targetTop + this._orderingAreaHeight);
                isInBottomOrderArea = mouseLocationY > (targetTop + $targetElement.height() - this._orderingAreaHeight);
                this._isTargetContainer = true;
            }
            $targetElement.addClass(this._getDroppableClassName(isInTopOrderArea, isInBottomOrderArea));
        }
    };
    ReportControlsDragDropHelper.prototype.doStopDrag = function () {
        this._removeClass(this._targetElement);
        var targetModel = this._getElementViewModel(this._target);
        if (!this._target || !targetModel || !this._canDrop(this._target, targetModel)) {
            return this._draggableModel.surface;
        }
        var draggablePathName = this._draggable.data.name.split('.')[0], siblings = (targetModel.parentModel() || targetModel)[draggablePathName], canReorder = this._canReorder(this._target, this._draggable.data), isReorderingBand = xrBand_1.BandViewModel.isReorderingBand(this._draggableModel), isDragToBottom = this._isDragToBottom(this._target), isBandReordering = isReorderingBand && !this._isTargetContainer;
        if (!isBandReordering) {
            this._draggableParent.removeChild(this._draggableModel);
        }
        if (canReorder) {
            if (isReorderingBand) {
                this._reorderBands(targetModel);
            }
            else if (this._tableControlTypes.indexOf(this._draggableModel.controlType) !== -1) {
                this._reorderTableControls(targetModel, siblings, isDragToBottom);
            }
            else {
                siblings && siblings.splice(siblings.indexOf(targetModel) + isDragToBottom, 0, this._draggableModel);
            }
        }
        else if (targetModel instanceof xrTable_1.XRTableControlViewModel || targetModel instanceof xrTableRow_1.XRTableRowViewModel) {
            var draggableInfoClone = this._serializer.serialize(this._draggableModel);
            return this._insertTableChildren(targetModel, draggableInfoClone, 0);
        }
        else {
            this._changeControlParent(targetModel);
        }
        return this._draggableModel.surface;
    };
    return ReportControlsDragDropHelper;
}());
exports.ReportControlsDragDropHelper = ReportControlsDragDropHelper;
