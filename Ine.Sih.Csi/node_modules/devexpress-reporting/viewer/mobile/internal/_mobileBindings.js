/**
* DevExpress HTML/JS Reporting (viewer\mobile\internal\_mobileBindings.js)
* Version:  20.2.5
* Build date: Jan 18, 2021
* Copyright (c) 2012 - 2021 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var _eventProcessor_1 = require("./_eventProcessor");
var events = require("devextreme/events");
var ko = require("knockout");
var $ = require("jquery");
ko.bindingHandlers['mobileZoom'] = {
    init: function (element, valueAccessor) {
        var $element = $(element);
        var options = valueAccessor();
        var zoom = options.zoom();
        events.on(element, 'dxpinch', function (e) {
            e.stopPropagation();
            e.preventDefault();
            var scale = e['scale'];
            var newZoom = zoom;
            if (scale > 1) {
                newZoom += ((scale - 1) / _eventProcessor_1.slowdownDisctanceFactor);
            }
            else {
                newZoom -= ((1 - scale) / _eventProcessor_1.slowdownDisctanceFactor);
            }
            newZoom = Math.max(0.15, Math.min(2, newZoom));
            options.zoom(newZoom);
        });
        events.on(element, 'dxpinchstart', function (e) {
            e.stopPropagation();
            e.preventDefault();
            options.zoomUpdating(true);
            zoom = options.zoom.peek();
        });
        events.on(element, 'dxpinchend', function (e) {
            e.stopPropagation();
            options.zoomUpdating(false);
        });
    }
};
ko.bindingHandlers['slide'] = {
    init: function (element, valueAccessor) {
        var slideOptionsValue = valueAccessor();
        var isStarted = false;
        var processor = new _eventProcessor_1.EventProcessor(element, slideOptionsValue);
        events.on(element, 'dxpointerdown', function (e) {
            processor.start(e);
            isStarted = true;
        });
        events.on(element, 'dxpointermove', function (e) {
            isStarted && processor.move(e);
        });
        ['dxpointercancel', 'dxpointerleave', 'dxpointerup'].forEach(function (value) {
            events.on(element, value, function (e) {
                if (isStarted) {
                    processor.end(e);
                    isStarted = false;
                }
            });
        });
    }
};
