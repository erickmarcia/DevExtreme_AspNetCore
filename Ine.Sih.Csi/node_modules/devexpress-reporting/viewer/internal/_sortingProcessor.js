/**
* DevExpress HTML/JS Reporting (viewer\internal\_sortingProcessor.js)
* Version:  20.2.5
* Build date: Jan 18, 2021
* Copyright (c) 2012 - 2021 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var _previewRequestWrapper_1 = require("./_previewRequestWrapper");
var SortingProcessor = (function () {
    function SortingProcessor(_getSortingStage) {
        this._getSortingStage = _getSortingStage;
    }
    SortingProcessor.prototype.doSorting = function (sortData, shiftKey, ctrlKey) {
        if (!sortData)
            return;
        if (ctrlKey) {
            if (this._detachSorting(sortData))
                return;
        }
        else if (shiftKey)
            this._appendSorting(sortData);
        else
            this._applySorting(sortData);
        return true;
    };
    SortingProcessor.prototype._applySorting = function (sortData) {
        var _this = this;
        this._getSortingStage().forEach(function (x) {
            if (x && x.Key === sortData.target) {
                (x.Value || []).forEach(function (f) {
                    if (f && (f.fieldName === sortData.field))
                        _this._changeSortOrder(f);
                    else
                        f.sortOrder = _previewRequestWrapper_1.ColumnSortOrder.None;
                });
            }
        });
    };
    SortingProcessor.prototype._appendSorting = function (sortData) {
        var _this = this;
        this._getSortingStage().forEach(function (x) {
            if (x && x.Key === sortData.target) {
                (x.Value || []).forEach(function (f) { f && (f.fieldName === sortData.field) && _this._changeSortOrder(f); });
                return;
            }
        });
    };
    SortingProcessor.prototype._detachSorting = function (sortData) {
        var skipProcessing = false;
        this._getSortingStage().forEach(function (x) {
            if (x && x.Key === sortData.target) {
                (x.Value || []).forEach(function (f) {
                    if (f && (f.fieldName === sortData.field)) {
                        if (f.sortOrder === _previewRequestWrapper_1.ColumnSortOrder.None)
                            skipProcessing = true;
                        else
                            f.sortOrder = _previewRequestWrapper_1.ColumnSortOrder.None;
                    }
                });
                return;
            }
        });
        return skipProcessing;
    };
    SortingProcessor.prototype._changeSortOrder = function (fieldInfo) {
        fieldInfo.sortOrder = fieldInfo.sortOrder === _previewRequestWrapper_1.ColumnSortOrder.Ascending ? _previewRequestWrapper_1.ColumnSortOrder.Descending : _previewRequestWrapper_1.ColumnSortOrder.Ascending;
    };
    return SortingProcessor;
}());
exports.SortingProcessor = SortingProcessor;
