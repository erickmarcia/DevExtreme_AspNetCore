/**
* DevExpress Analytics (query-builder\wizard\pages\wizardPage.d.ts)
* Version:  20.2.5
* Build date: Jan 18, 2021
* Copyright (c) 2012 - 2021 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
import { IDisposable, Disposable } from '../../../serializer/utils';
export interface IWizardPage extends IDisposable {
    commit: () => JQueryPromise<any>;
    initialize: (state: any) => JQueryPromise<any>;
    canFinish: () => boolean;
    canNext: () => boolean;
    onChange?: (callback: () => void) => void;
}
export declare class WizardPageBase<TState = any, TResult = any> extends Disposable implements IWizardPage {
    dispose(): void;
    commit(): JQueryPromise<any>;
    protected _onChange: () => void;
    onChange(callback: any): void;
    initialize(state: TState): JQueryPromise<any>;
    canNext(): boolean;
    canFinish(): boolean;
}
export declare class _WrappedWizardPage extends Disposable {
    pageId: string;
    page: IWizardPage;
    template: string;
    description?: string;
    dispose(): void;
    resetCommitedState(): void;
    private _lastCommitedState;
    private _isInitialized;
    private _initDef;
    isChanged: boolean;
    onChange: (callback: () => void) => void;
    constructor(pageId: string, page: IWizardPage, template: string, description?: string);
    commit(): JQueryPromise<any>;
    initialize(state: any, force?: boolean): JQuery.Promise<any, any, any>;
}
