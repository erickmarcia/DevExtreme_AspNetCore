/**
* DevExpress Analytics (property-grid\widgets\fonteditor\_model.js)
* Version:  20.2.5
* Build date: Jan 18, 2021
* Copyright (c) 2012 - 2021 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var ko = require("knockout");
var utils_1 = require("../../../serializer/utils");
exports.availableUnits = [
    { value: 'pt', displayValue: 'Point', localizationId: 'DevExpress.ReportDesigner_FontOptions_Unit_Point' },
    { value: 'world', displayValue: 'World', localizationId: 'AnalyticsCoreStringId.FontOptions_Unit_World' },
    { value: 'px', displayValue: 'Pixel', localizationId: 'AnalyticsCoreStringId.FontOptions_Unit_Pixel' },
    { value: 'in', displayValue: 'Inch', localizationId: 'AnalyticsCoreStringId.Wizard_Inch' },
    { value: 'doc', displayValue: 'Document', localizationId: 'PreviewStringId.ReportDesigner_FontOptions_Unit_Document' },
    { value: 'mm', displayValue: 'Millimetr', localizationId: 'AnalyticsCoreStringId.Wizard_Millimeter' }
];
var FontModel = (function (_super) {
    __extends(FontModel, _super);
    function FontModel(value) {
        var _this = _super.call(this) || this;
        _this.family = ko.observable('Times New Roman');
        _this.unit = ko.observable('pt');
        _this.isUpdateModel = false;
        _this.size = ko.observable(9);
        _this.modificators = {
            bold: ko.observable(false),
            italic: ko.observable(false),
            strikeout: ko.observable(false),
            underline: ko.observable(false)
        };
        _this.updateModel(value());
        _this._disposables.push(value.subscribe(function (newVal) {
            _this.isUpdateModel = true;
            _this.updateModel(newVal);
            _this.isUpdateModel = false;
        }));
        _this._disposables.push(_this.modificators.bold.subscribe(function (newVal) { return _this.updateValue(value); }));
        _this._disposables.push(_this.modificators.italic.subscribe(function (newVal) { return _this.updateValue(value); }));
        _this._disposables.push(_this.modificators.strikeout.subscribe(function (newVal) { return _this.updateValue(value); }));
        _this._disposables.push(_this.modificators.underline.subscribe(function (newVal) { return _this.updateValue(value); }));
        _this._disposables.push(_this.family.subscribe(function (newVal) { return _this.updateValue(value); }));
        _this._disposables.push(_this.size.subscribe(function (newVal) { return _this.updateValue(value); }));
        _this._disposables.push(_this.unit.subscribe(function (newVal) { return _this.updateValue(value); }));
        return _this;
    }
    FontModel.prototype.updateModel = function (value) {
        if (value) {
            var components = value.split(',');
            this.family(components[0]);
            var self = this;
            exports.availableUnits.forEach(function (element) {
                if (components[1].indexOf(element.value) != -1) {
                    self.size(parseFloat(components[1].split(element.value)[0]));
                    self.unit(element.value);
                }
            });
            this.modificators.bold(value.indexOf('Bold') !== -1);
            this.modificators.italic(value.indexOf('Italic') !== -1);
            this.modificators.underline(value.indexOf('Underline') !== -1);
            this.modificators.strikeout(value.indexOf('Strikeout') !== -1);
        }
    };
    FontModel.prototype.updateValue = function (value) {
        if (!this.isUpdateModel) {
            var leftPart = [this.family(), this.size() + this.unit()].join(', ');
            var modificators = [];
            if (this.modificators.bold())
                modificators.push('Bold');
            if (this.modificators.italic())
                modificators.push('Italic');
            if (this.modificators.underline())
                modificators.push('Underline');
            if (this.modificators.strikeout())
                modificators.push('Strikeout');
            var rightPart = modificators.join(', ');
            value(!!rightPart ? [leftPart, rightPart].join(', style=') : leftPart);
        }
    };
    return FontModel;
}(utils_1.Disposable));
exports.FontModel = FontModel;
