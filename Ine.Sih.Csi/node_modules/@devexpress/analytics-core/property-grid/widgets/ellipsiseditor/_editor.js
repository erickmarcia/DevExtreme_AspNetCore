/**
* DevExpress Analytics (property-grid\widgets\ellipsiseditor\_editor.js)
* Version:  20.2.5
* Build date: Jan 18, 2021
* Copyright (c) 2012 - 2021 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var ko = require("knockout");
var $ = require("jquery");
var _svgTemplateEngine_1 = require("../internal/_svgTemplateEngine");
var text_box_1 = require("devextreme/ui/text_box");
var component_registrator_1 = require("devextreme/core/component_registrator");
var _utils_1 = require("../internal/_utils");
var _internal_1 = require("../../../serializer/_internal");
var editor_prefix = 'dx-ellipsiseditor', EDITOR_CLASS = editor_prefix + ' dx-dropdowneditor', EDITOR_BUTTON_CLASS = editor_prefix + '-button dx-widget dx-button-normal dx-dropdowneditor-button dx-ellipsis-button', EDITOR_BUTTON_ICON_CLASS = editor_prefix + '-icon dx-ellipsis-image dx-dropdowneditor-icon', EDITOR_BUTTON_ICON_TEMPLATE = 'dxrd-svg-ellipsis', EDITOR_WARNING_STATE_CLASS = 'dx-ellipsiseditor-warning';
var dxEllipsisEditor = (function (_super) {
    __extends(dxEllipsisEditor, _super);
    function dxEllipsisEditor(element, options) {
        return _super.call(this, element, options) || this;
    }
    dxEllipsisEditor.prototype._init = function () {
        _super.prototype['_init'].call(this);
        if (!this._$element) {
            this._$element = $(this.element());
        }
        this._$element.addClass(EDITOR_CLASS);
        this._koContext = ko.contextFor(this._$element.get(0));
    };
    dxEllipsisEditor.prototype._render = function () {
        _super.prototype['_render'].call(this);
        this._renderButton();
        this._updateWarningState();
        this._attachInputEvents();
    };
    dxEllipsisEditor.prototype._updateWarningState = function (value) {
        if (value === void 0) { value = this.option('warningMessage'); }
        if (value) {
            this._$element.attr('title', value);
            this._$element.addClass(EDITOR_WARNING_STATE_CLASS);
        }
        else {
            this._$element.removeAttr('title');
            this._$element.removeClass(EDITOR_WARNING_STATE_CLASS);
        }
    };
    dxEllipsisEditor.prototype._renderButton = function () {
        this._$button = $('<div />').addClass(EDITOR_BUTTON_CLASS);
        this._attachButtonEvents();
        this._$buttonIcon = $('<div />').addClass(EDITOR_BUTTON_ICON_CLASS).height('100%').append(_svgTemplateEngine_1.SvgTemplatesEngine.templates[EDITOR_BUTTON_ICON_TEMPLATE]).appendTo(this._$button);
        ko.applyBindingsToDescendants(this._koContext, this._$buttonIcon[0]);
        var buttonsContainer = _super.prototype['_buttonsContainer'].call(this);
        this._$button.prependTo(buttonsContainer);
    };
    dxEllipsisEditor.prototype._updateButtonSize = function () {
        this._$buttonIcon.height($(this.element()).height());
    };
    dxEllipsisEditor.prototype._attachButtonEvents = function () {
        var _this = this;
        var subscribeElements = [];
        if (!this._$input)
            this._$input = $(this['_input']());
        this._$button.off('click');
        this._$input.off('click');
        if (!this.option('disabled'))
            subscribeElements.push(this._$button);
        if (this.option('openOnFieldClick'))
            subscribeElements.push(this._$input);
        subscribeElements.forEach(function ($element) {
            $element.on('click', _this.buttonAction.bind(_this));
        });
    };
    dxEllipsisEditor.prototype._attachInputEvents = function () {
        var _this = this;
        var input = this['_input']()[0];
        if (!input)
            return;
        var handler = function (e) {
            if (e.key == _utils_1.KeyboardEnum.Enter || (e.key == _utils_1.KeyboardEnum.ArrowDown && e.altKey)) {
                _this.buttonAction(e);
            }
        };
        input.addEventListener('keydown', handler);
        _internal_1.addDisposeCallback(input, function () {
            input.removeEventListener('keydown', handler);
        });
    };
    dxEllipsisEditor.prototype._optionChanged = function (args) {
        switch (args.name) {
            case 'disabled':
                this._attachButtonEvents();
                break;
            case 'warningMessage':
                this._updateWarningState(args.value);
                break;
        }
        _super.prototype['_optionChanged'].apply(this, arguments);
    };
    dxEllipsisEditor.prototype.buttonAction = function (e) {
        if (this.option('buttonAction')) {
            this.option('buttonAction')();
            e.stopPropagation();
        }
    };
    return dxEllipsisEditor;
}(text_box_1.default));
exports.dxEllipsisEditor = dxEllipsisEditor;
component_registrator_1.default('dxEllipsisEditor', dxEllipsisEditor);
