/**
* DevExpress Analytics (core\widgets\_buttonInlineEditor.js)
* Version:  20.2.5
* Build date: Jan 18, 2021
* Copyright (c) 2012 - 2021 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var ko = require("knockout");
var $ = require("jquery");
var button_1 = require("devextreme/ui/button");
var component_registrator_1 = require("devextreme/core/component_registrator");
var editor_template = {
    render: function (options) {
        var $icon = $('<i />').addClass('dx-icon');
        if (!!options.model.iconClass) {
            $icon.addClass(options.model.iconClass);
            $icon.addClass('dx-icon-' + options.model.iconClass);
            $icon.addClass('dx-icon-dxrd');
        }
        else if (!!options.model.icon) {
            $icon.addClass(options.model.icon);
        }
        if (options.model.icon) {
            $icon.attr('data-bind', "template: '" + options.model.icon + "'");
        }
        var icon = $icon.get(0);
        $(options.container).append(icon);
        setTimeout(function () {
            if (!ko.dataFor(icon))
                ko.applyBindings(options.model, icon);
        }, 1);
    }
};
var dxButtonWithTemplate = (function (_super) {
    __extends(dxButtonWithTemplate, _super);
    function dxButtonWithTemplate(element, options) {
        var _this = this;
        options['template'] = editor_template;
        _this = _super.call(this, element, options) || this;
        return _this;
    }
    dxButtonWithTemplate.prototype._getContentData = function () {
        var data = _super.prototype['_getContentData'].call(this);
        return ko.utils.extend(data, { iconClass: this.option('iconClass') });
    };
    dxButtonWithTemplate.prototype._optionChanged = function (args) {
        switch (args.name) {
            case 'iconClass':
                this['_updateContent']();
                this['_updateAriaLabel']();
                break;
            default:
                _super.prototype['_optionChanged'].call(this, args);
        }
    };
    return dxButtonWithTemplate;
}(button_1.default));
exports.dxButtonWithTemplate = dxButtonWithTemplate;
component_registrator_1.default('dxButtonWithTemplate', dxButtonWithTemplate);
