/**
* DevExpress Analytics (core\internal\_controlsHelper.d.ts)
* Version:  20.2.5
* Build date: Jan 18, 2021
* Copyright (c) 2012 - 2021 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
import * as ko from 'knockout';
import { IDisposable, Disposable } from '../../serializer/utils';
export interface IDisplayedObject {
    name: ko.Observable<string> | ko.Computed<string>;
}
export interface IDesignControlsHelper extends IDisposable {
    getControls: (target: any) => ko.ObservableArray<IDisplayedObject>;
    allControls: ko.ObservableArray<IDisplayedObject>;
    getNameProperty?: (model: any) => ko.Observable<string> | ko.Computed<string>;
}
export declare class DesignControlsHelper extends Disposable implements IDesignControlsHelper {
    protected target: any;
    private collectionNames?;
    private _handlers;
    private _setText;
    private _visitedCollections;
    private _subscriptions;
    getNameProperty(model: any): any;
    protected _setName(value: any): void;
    dispose(): void;
    private added;
    private deleted;
    processCollection(collection: any): void;
    _collectControls(target: any): void;
    constructor(target: any, handlers?: Array<{
        added: (control: any) => void;
        deleted?: (control: any) => void;
    }>, collectionNames?: string[]);
    getControls(target: any): ko.ObservableArray<IDisplayedObject>;
    allControls: ko.ObservableArray<IDisplayedObject>;
}
